// <auto-generated />
using System;
using Algar.Hours.Persistence.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Algar.Hours.Persistence.Migrations
{
    [DbContext(typeof(DatabaseService))]
    [Migration("20240119210010_AlterUpdateCountryEntityZonaHoraria")]
    partial class AlterUpdateCountryEntityZonaHoraria
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Aprobador.Aprobador", b =>
                {
                    b.Property<Guid>("IdAprobador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer");

                    b.HasKey("IdAprobador");

                    b.ToTable("Aprobador");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.AprobadorUsuario.AprobadorUsuario", b =>
                {
                    b.Property<Guid>("IdAprobadorUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AprobadorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("IdAprobadorUsuario");

                    b.HasIndex("AprobadorId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("AprobadorUsuario");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.AssignmentReport.AssignmentReport", b =>
                {
                    b.Property<Guid>("IdAssignmentReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateApprovalCancellation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HorusReportEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("IdAssignmentReport");

                    b.HasIndex("HorusReportEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("assignmentReports");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Client.ClientEntity", b =>
                {
                    b.Property<Guid>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NameClient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdClient");

                    b.ToTable("ClientEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Country.CountryEntity", b =>
                {
                    b.Property<Guid>("IdCounty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodigoPais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ZonaHoraria")
                        .HasColumnType("integer");

                    b.HasKey("IdCounty");

                    b.ToTable("CountryEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Festivos.FestivosEntity", b =>
                {
                    b.Property<Guid>("IdFestivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DiaFestivo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ano")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdFestivo");

                    b.HasIndex("CountryId");

                    b.ToTable("FestivosEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Gerentes.UserManagerEntity", b =>
                {
                    b.Property<Guid>("IdUserManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManagerCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManagerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManagerEmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUserManager");

                    b.ToTable("UserManagerEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Horario.workinghoursEntity", b =>
                {
                    b.Property<Guid>("IdworkinghoursEntity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaWorking")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("week")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdworkinghoursEntity");

                    b.HasIndex("UserEntityId");

                    b.ToTable("workinghoursEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.HorusReport.HorusReportEntity", b =>
                {
                    b.Property<Guid>("IdHorusReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ARPLoadingId")
                        .HasColumnType("text");

                    b.Property<int>("Acitivity")
                        .HasColumnType("integer");

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CountHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateApprovalSystem")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberReport")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoReporte")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("IdHorusReport");

                    b.HasIndex("ClientEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("HorusReportEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.HorusReportManagerEntity.HorusReportManagerEntity", b =>
                {
                    b.Property<Guid>("IdHorusReportManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CountHours")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeReport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserEntityManagerId")
                        .HasColumnType("uuid");

                    b.HasKey("IdHorusReportManager");

                    b.HasIndex("UserEntityId");

                    b.ToTable("HorusReportManagerEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Load.ARPLoadDetailEntity", b =>
                {
                    b.Property<Guid>("IdDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ACTIVIDAD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ARPLoadEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CATEGORIA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("COMENTARIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DOC_NUM")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ESTADO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FECHA_EXTRATED")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FECHA_REP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HORA_FIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HORA_INICIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ID_EMPLEADO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NOMBRE_CLIENTE")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NUMERO_CLIENTE")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PAIS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TOOL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TOTAL_MINUTOS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdDetail");

                    b.HasIndex("ARPLoadEntityId");

                    b.ToTable("ARPLoadDetailEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Load.ARPLoadEntity", b =>
                {
                    b.Property<Guid>("IdArpLoad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("userEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("IdArpLoad");

                    b.HasIndex("userEntityId");

                    b.ToTable("ARPLoadEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Load.Philadedata.Philadedata", b =>
                {
                    b.Property<Guid>("IdPhiladedata")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalHoras")
                        .HasColumnType("double precision");

                    b.HasKey("IdPhiladedata");

                    b.ToTable("Philadedata");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Load.STELoadEntity", b =>
                {
                    b.Property<Guid>("IdSTELoad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountCMRNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CaseSubject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndDateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreCuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroCaso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SessionEmployeeSerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SessionTimeAgentCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SessionTimeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartDateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TotalDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSTELoad");

                    b.ToTable("STELoadEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Load.TSELoadEntity", b =>
                {
                    b.Property<Guid>("IdTSELoad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountCMRNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountNameText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DurationInHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroEmpleado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioISO2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkOrder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZonaHoraria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdTSELoad");

                    b.ToTable("TSELoadEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Menu.MenuEntity", b =>
                {
                    b.Property<Guid>("IdMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameMenu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdMenu");

                    b.ToTable("MenuEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Parameters.ParametersEntity", b =>
                {
                    b.Property<Guid>("IdParametersEntity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryEntityId")
                        .HasColumnType("uuid");

                    b.Property<double>("TargetHourMonth")
                        .HasColumnType("double precision");

                    b.Property<double>("TargetHourWeek")
                        .HasColumnType("double precision");

                    b.Property<double>("TargetHourYear")
                        .HasColumnType("double precision");

                    b.Property<double>("TargetTimeDay")
                        .HasColumnType("double precision");

                    b.Property<int>("TypeHours")
                        .HasColumnType("integer");

                    b.Property<int>("TypeLimits")
                        .HasColumnType("integer");

                    b.HasKey("IdParametersEntity");

                    b.HasIndex("CountryEntityId");

                    b.ToTable("ParametersEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.ParametrosInicial.ParametersArpInitialEntity", b =>
                {
                    b.Property<Guid>("IdParametersInitialEntity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ARPLoadDetailEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Festivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HorasFin")
                        .HasColumnType("integer");

                    b.Property<int>("HorasInicio")
                        .HasColumnType("integer");

                    b.Property<string>("OutIme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OverTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semana")
                        .HasColumnType("integer");

                    b.HasKey("IdParametersInitialEntity");

                    b.HasIndex("ARPLoadDetailEntityId");

                    b.ToTable("ParametersArpInitialEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.ParametrosInicial.ParametersSteInitialEntity", b =>
                {
                    b.Property<Guid>("IdParamSTEInitialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Festivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HorasFin")
                        .HasColumnType("integer");

                    b.Property<int>("HorasInicio")
                        .HasColumnType("integer");

                    b.Property<string>("OutIme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OverTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("STELoadEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("Semana")
                        .HasColumnType("integer");

                    b.HasKey("IdParamSTEInitialId");

                    b.HasIndex("STELoadEntityId");

                    b.ToTable("ParametersSteInitialEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.ParametrosInicial.ParametersTseInitialEntity", b =>
                {
                    b.Property<Guid>("IdParamTSEInitialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Festivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HorasFin")
                        .HasColumnType("integer");

                    b.Property<int>("HorasInicio")
                        .HasColumnType("integer");

                    b.Property<string>("OutIme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OverTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semana")
                        .HasColumnType("integer");

                    b.Property<Guid>("TSELoadEntityIdTSELoad")
                        .HasColumnType("uuid");

                    b.HasKey("IdParamTSEInitialId");

                    b.HasIndex("TSELoadEntityIdTSELoad");

                    b.ToTable("ParametersTseInitialEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.QueuesAcceptance.QueuesAcceptanceEntity", b =>
                {
                    b.Property<Guid>("IdQueuesAcceptanceEntity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ARPLoadDetailEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AprobadoSistema")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<string>("FechaRe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hora_Fin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hora_Inicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Horas_Total")
                        .HasColumnType("double precision");

                    b.Property<string>("Id_empleado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdQueuesAcceptanceEntity");

                    b.HasIndex("ARPLoadDetailEntityId");

                    b.ToTable("QueuesAcceptanceEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.QueuesAcceptance.QueuesAcceptanceEntitySTE", b =>
                {
                    b.Property<Guid>("IdQueuesAcceptanceEntitySTE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AprobadoSistema")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<string>("FechaRe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hora_Fin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hora_Inicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Horas_Total")
                        .HasColumnType("double precision");

                    b.Property<string>("Id_empleado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("STELoadEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("IdQueuesAcceptanceEntitySTE");

                    b.HasIndex("STELoadEntityId");

                    b.ToTable("QueuesAcceptanceEntitySTE");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.QueuesAcceptance.QueuesAcceptanceEntityTSE", b =>
                {
                    b.Property<Guid>("IdQueuesAcceptanceEntityTSE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AprobadoSistema")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<string>("FechaRe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hora_Fin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hora_Inicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Horas_Total")
                        .HasColumnType("double precision");

                    b.Property<string>("Id_empleado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TSELoadEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("IdQueuesAcceptanceEntityTSE");

                    b.HasIndex("TSELoadEntityId");

                    b.ToTable("QueuesAcceptanceEntityTSE");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Rol.RoleEntity", b =>
                {
                    b.Property<Guid>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdRole");

                    b.ToTable("RoleEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.RolMenu.RoleMenuEntity", b =>
                {
                    b.Property<Guid>("IdRoleMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("IdRoleMenu");

                    b.HasIndex("MenuEntityId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMenuEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.User.UserEntity", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("surnameUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUser");

                    b.HasIndex("CountryEntityId");

                    b.HasIndex("RoleEntityId");

                    b.ToTable("UserEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.UserZonaHoraria", b =>
                {
                    b.Property<Guid>("IdUserZone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZonaHorariaU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUserZone");

                    b.ToTable("UserZonaHoraria");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.UsersExceptions.UsersExceptions", b =>
                {
                    b.Property<Guid>("IdUsersExceptions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<float>("horas")
                        .HasColumnType("real");

                    b.HasKey("IdUsersExceptions");

                    b.HasIndex("UserId");

                    b.ToTable("UsersExceptions");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.AprobadorUsuario.AprobadorUsuario", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Aprobador.Aprobador", "Aprobador")
                        .WithMany()
                        .HasForeignKey("AprobadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algar.Hours.Domain.Entities.User.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aprobador");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.AssignmentReport.AssignmentReport", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.HorusReport.HorusReportEntity", "HorusReportEntity")
                        .WithMany()
                        .HasForeignKey("HorusReportEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algar.Hours.Domain.Entities.User.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HorusReportEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Festivos.FestivosEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Country.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Horario.workinghoursEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.User.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.HorusReport.HorusReportEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Client.ClientEntity", "ClientEntity")
                        .WithMany()
                        .HasForeignKey("ClientEntityId");

                    b.HasOne("Algar.Hours.Domain.Entities.User.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.HorusReportManagerEntity.HorusReportManagerEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.User.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Load.ARPLoadDetailEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Load.ARPLoadEntity", "ARPLoadEntity")
                        .WithMany()
                        .HasForeignKey("ARPLoadEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ARPLoadEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Load.ARPLoadEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.User.UserEntity", "userEntity")
                        .WithMany()
                        .HasForeignKey("userEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.Parameters.ParametersEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Country.CountryEntity", "CountryEntity")
                        .WithMany()
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.ParametrosInicial.ParametersArpInitialEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Load.ARPLoadDetailEntity", "ARPLoadDetailEntity")
                        .WithMany()
                        .HasForeignKey("ARPLoadDetailEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ARPLoadDetailEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.ParametrosInicial.ParametersSteInitialEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Load.STELoadEntity", "STELoadEntity")
                        .WithMany()
                        .HasForeignKey("STELoadEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("STELoadEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.ParametrosInicial.ParametersTseInitialEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Load.TSELoadEntity", "TSELoadEntity")
                        .WithMany()
                        .HasForeignKey("TSELoadEntityIdTSELoad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TSELoadEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.QueuesAcceptance.QueuesAcceptanceEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Load.ARPLoadDetailEntity", "ARPLoadDetailEntity")
                        .WithMany()
                        .HasForeignKey("ARPLoadDetailEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ARPLoadDetailEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.QueuesAcceptance.QueuesAcceptanceEntitySTE", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Load.STELoadEntity", "STELoadEntity")
                        .WithMany()
                        .HasForeignKey("STELoadEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("STELoadEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.QueuesAcceptance.QueuesAcceptanceEntityTSE", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Load.TSELoadEntity", "TSELoadEntity")
                        .WithMany()
                        .HasForeignKey("TSELoadEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TSELoadEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.RolMenu.RoleMenuEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Menu.MenuEntity", "MenuEntity")
                        .WithMany()
                        .HasForeignKey("MenuEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algar.Hours.Domain.Entities.Rol.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuEntity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.User.UserEntity", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.Country.CountryEntity", "CountryEntity")
                        .WithMany()
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algar.Hours.Domain.Entities.Rol.RoleEntity", "RoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryEntity");

                    b.Navigation("RoleEntity");
                });

            modelBuilder.Entity("Algar.Hours.Domain.Entities.UsersExceptions.UsersExceptions", b =>
                {
                    b.HasOne("Algar.Hours.Domain.Entities.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
